// package engine implements generic correlation logic to correlate across domains.
package engine

import (
	"context"
	"fmt"
	"strings"

	"github.com/korrel8r/korrel8r/internal/pkg/logging"
	"github.com/korrel8r/korrel8r/pkg/graph"
	"github.com/korrel8r/korrel8r/pkg/korrel8r"
	"golang.org/x/exp/maps"
	"gonum.org/v1/gonum/graph/multi"
)

var log = logging.Log()

// Engine combines a set of domains and a set of rules, so it can perform correlation.
type Engine struct {
	stores        map[string]korrel8r.Store
	domains       map[string]korrel8r.Domain
	rules         []korrel8r.Rule
	graph         *graph.Graph
	templateFuncs map[string]any
}

func New() *Engine {
	return &Engine{
		stores:        map[string]korrel8r.Store{},
		domains:       map[string]korrel8r.Domain{},
		templateFuncs: map[string]any{},
	}
}

// Domain returns the named domain or nil if not found.
func (e *Engine) Domain(name string) korrel8r.Domain { return e.domains[name] }
func (e *Engine) DomainErr(name string) (korrel8r.Domain, error) {
	if d := e.Domain(name); d != nil {
		return d, nil
	}
	return nil, fmt.Errorf("domain not found: %v", name)
}

// Domains returns a list of known domains.
func (e *Engine) Domains() (domains []korrel8r.Domain) { return maps.Values(e.domains) }

// Store returns the default store for domain, or nil if not found.
func (e *Engine) Store(name string) korrel8r.Store { return e.stores[name] }
func (e *Engine) StoreErr(name string) (korrel8r.Store, error) {
	if s := e.Store(name); s != nil {
		return s, nil
	}
	return nil, fmt.Errorf("store not found: %v", name)
}

// TemplateFuncser can be implemented by Domain or Store implementations to contribute
// domain-specific template functions to template rules generated by the Engine.
// See text/template.Template.Funcs for details.
type TemplateFuncser interface{ TemplateFuncs() map[string]any }

// AddDomain domain and corresponding store, store may be nil.
func (e *Engine) AddDomain(d korrel8r.Domain, s korrel8r.Store) {
	e.domains[d.String()] = d
	if s != nil {
		e.stores[d.String()] = s
	}
	// Stores and Domains implement TemplateFuncser if they provide template helper functions
	// for use by rules.
	for _, v := range []any{d, s} {
		if tf, ok := v.(TemplateFuncser); ok {
			maps.Copy(e.templateFuncs, tf.TemplateFuncs())
		}
	}
}

// Class parses a full 'domain/class' name and returns the class.
func (e *Engine) Class(name string) (korrel8r.Class, error) {
	d, c, ok := strings.Cut(name, "/")
	if !ok || c == "" || d == "" {
		return nil, fmt.Errorf("invalid class name: %v", name)
	}
	domain, err := e.DomainErr(d)
	if err != nil {
		return nil, err
	}
	class := domain.Class(c)
	if class == nil {
		return nil, fmt.Errorf("unknown class in domain %v: %v", d, c)
	}
	return class, nil
}

func (e *Engine) Rules() []korrel8r.Rule { return e.rules }

func (e *Engine) AddRule(r korrel8r.Rule) error {
	e.rules = append(e.rules, r)
	return nil
}

func (e *Engine) AddRules(rules ...korrel8r.Rule) error {
	for _, r := range rules {
		if err := e.AddRule(r); err != nil {
			return err
		}
	}
	return nil
}

type results map[korrel8r.Class]korrel8r.Result

func (r results) Result(c korrel8r.Class) korrel8r.Result {
	if r[c] == nil {
		r[c] = korrel8r.NewResult(c)
	}
	return r[c]
}

// Traverse a rule graph, accumulate results.
// Failure to apply a rule is not an error.
func (e *Engine) Traverse(ctx context.Context, initial []korrel8r.Object, c *korrel8r.Constraint, pathGraph *graph.Graph) error {
	var objects results
	return graph.Traverse(pathGraph, func(edge multi.Edge) {
		start, goal := graph.ClassForNode(edge.From()), graph.ClassForNode(edge.To())
		if objects == nil { // First edge
			objects = results{}
			objects.Result(start).Append(initial...)
		}
		starters := objects.Result(start).List()
		if len(starters) == 0 {
			log.V(3).Info("no starters", "start", korrel8r.ClassName(start), "goal", korrel8r.ClassName(goal))
			return // Can't proceed without start objects
		}
		store, err := e.StoreErr(goal.Domain().String())
		if err != nil { // Generate queries even if there is no store
			log.V(2).Error(err, "no store", "goal", korrel8r.ClassName(goal))
		}

		for edge.Next() { // For each line in the edge
			l := edge.Line().(*graph.Line)
			for _, s := range starters {
				r := l.Result                     // line result
				to := l.To().(*graph.Node).Result // Target node result
				q, err := l.Rule.Apply(s, c)
				if err != nil {
					log.V(3).Error(err, "did not apply", "rule", l.Rule)
					continue
				}
				to.Queries.Add(q)
				if r.Queries.Add(q) && store != nil {
					log.V(3).Info("added query", "query", logging.JSON(q), "rule", l.Rule)
					counter := korrel8r.NewCountResult(objects.Result(goal))
					if err := store.Get(ctx, q, counter); err != nil {
						log.V(2).Error(err, "store get failed", "query", logging.JSON(q), "store", store.Domain())
					}
					if counter.Count > 0 {
						r.Objects += counter.Count
						to.Objects += counter.Count
						log.V(3).Info("got objects", "rule", l.Rule, "class", korrel8r.ClassName(to.Class), "count", counter.Count, "total", to.Objects)
					}
				}
			}
		}
	})
}

func (e *Engine) Graph() *graph.Graph {
	if e.graph == nil {
		e.graph = graph.New(e.rules...)
	}
	return e.graph
}

// TemplateFuncs returns template helper functions for stores and domains known to this engine.
// See text/template.Template.Funcs
func (e *Engine) TemplateFuncs() map[string]any { return e.templateFuncs }

func (e *Engine) Get(class korrel8r.Class, ctx context.Context, query korrel8r.Query, result korrel8r.Appender) error {
	store, err := e.StoreErr(class.Domain().String())
	if err != nil {
		return err
	}
	return store.Get(ctx, query, result)
}
